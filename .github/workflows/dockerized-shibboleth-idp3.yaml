name: test

on:
  push:
    branches:
    - 'main'
    - 'feature-test'
  pull_request:
    branches:
    - 'main'
    - 'feature-test'
  schedule:
    - cron: '0 12 * * *'
  workflow_dispatch:

env:
  TEST_IMAGE_NAME: 'dockerized-shibboleth-idp3:${{ github.sha }}'
  CACHE_IMAGE_NAME: 'dockerized-shibboleth-idp3:cache'
  PUSH_IMAGE_NAME: 'dockerized-shibboleth-idp3'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v2
        with:
          path: checkout

      # - name: Set up Docker Buildx
      #   uses: docker/setup-buildx-action@v1

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build the Docker image
        run: |
          cd checkout/${PUSH_IMAGE_NAME}
          docker build . -f Dockerfile --tag ${{ secrets.DOCKERHUB_USERNAME }}/${TEST_IMAGE_NAME} --tag ${{ secrets.DOCKERHUB_USERNAME }}/${CACHE_IMAGE_NAME}
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/${CACHE_IMAGE_NAME}
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/${TEST_IMAGE_NAME}

  # hadolint:
  #   runs-on: ubuntu-latest
  #   needs:
  #     - build
  #   steps:
  #     - uses: actions/checkout@v2
  #       with:
  #         path: checkout
  #     - name: Hadolint the Dockerfile
  #       run: docker run --rm -i -v ${PWD}/checkout/.hadolint.yaml:/root/.config/hadolint.yaml hadolint/hadolint < checkout/${PUSH_IMAGE_NAME}/Dockerfile

  scan:
    runs-on: ubuntu-latest
    needs:
      - build
    steps:
      - uses: actions/checkout@v2
      - name: pre-pull trivy image
        id: pull
        run: |
          docker pull aquasec/trivy:latest
          IMAGENAME=$(docker images aquasec/trivy:latest --no-trunc | awk '/aquasec\/trivy/{print $3}')
          echo "::set-output name=IMAGENAME::${IMAGENAME}"
      - uses: actions/cache@v2
        with:
          path: |
            .tryvy
          key: 'trivy-${{ steps.pull.outputs.IMAGENAME }}'
      - name: Scan image
        run: |
          mkdir -p ${PWD}/.trivy
          echo "スキャン開始"
          docker run --rm \
            -e TRIVY_TIMEOUT_SEC=120s \
            -v /var/run/docker.sock:/var/run/docker.sock \
            -v ${PWD}/.trivy:/root/.cache \
            aquasec/trivy:latest \
              --exit-code 0 ${TRIVY_OPT} ${{ secrets.DOCKERHUB_USERNAME }}/${TEST_IMAGE_NAME}
          echo "スキャン完了"
      - name: 後処理
        if: always()
        run: |
          docker run -v ${PWD}:/root busybox rm -fR /root/.trivy

  inspect:
    runs-on: ubuntu-latest
    needs:
      - build
    steps:
      - uses: actions/checkout@v2
        with:
          path: checkout
      - name: Inspect image
        run: |
          docker pull ${{ secrets.DOCKERHUB_USERNAME }}/${TEST_IMAGE_NAME}
          docker inspect ${{ secrets.DOCKERHUB_USERNAME }}/${TEST_IMAGE_NAME}

  push:
    runs-on: ubuntu-latest
    # if: contains(github.ref, '/tags/')
    needs:
      - scan
      - inspect
    steps:
      - uses: actions/checkout@v2
        with:
          path: checkout
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Push Docker Hub
        run: |
          docker pull ${{ secrets.DOCKERHUB_USERNAME }}/${TEST_IMAGE_NAME}
          docker tag "${{ secrets.DOCKERHUB_USERNAME }}/${TEST_IMAGE_NAME}" "${{ secrets.DOCKERHUB_USERNAME }}/${PUSH_IMAGE_NAME}"
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/${PUSH_IMAGE_NAME}

  test:
    runs-on: ubuntu-latest
    needs:
      - build
    steps:
      - uses: actions/checkout@v2
        with:
          path: checkout
      - name: setup docker-compose
        run: |
          curl -L "https://github.com/docker/compose/releases/download/1.28.4/docker-compose-$(uname -s)-$(uname -m)" -o ${{ github.workspace }}/docker-compose
          chmod +x ${{ github.workspace }}/docker-compose
      - name: Test Docker Image
        env:
          MAX_RETRY: '5'
          count: '0'
          SUCCESS: 'false'
        run: |
          cd checkout
          # docker-compose.yml にあるテストイメージをロードされたイメージ名に合わせます。
          sed -i "s|TEST_IMAGE_NAME|${TEST_IMAGE_NAME}|g" docker-compose.yml
          docker pull ${TEST_IMAGE_NAME}
          ${{ github.workspace }}/docker-compose up -d
          while [ $count -lt $MAX_RETRY ]
          do
            sleep 3
            curl -L --head http://localhost:8080 | grep "HTTP/1.1 200 OK" && exit 0
            ${{ github.workspace }}docker-compose logs test
            count=$((++count))
          done
          exit 1
